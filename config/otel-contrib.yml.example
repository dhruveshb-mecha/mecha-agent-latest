# Basic Opentelemetry Profile
#
# Extensions - Plugins
# Receivers - HostMetrics
# Processors - Batch/Filter/Sampling/Attributes add/remove
# Exporters - Logging
# Pipelines - Configurations [Receiver > Processor > Exporter]
#
# End
# Extensions
extensions:
# Receivers
receivers:
  hostmetrics/memory:
    collection_interval: 60s
    # root_path: /
    scrapers:
      memory:
        metrics:
          system.memory.usage: # Bytes of memory usage
            enabled: true
          system.memory.utilization: # Percentage of memory bytes in use
            enabled: true
  # HostMetrics: CPU
  hostmetrics/cpu:
    collection_interval: 60s
    # root_path: / # RootFS to check
    scrapers: ## Scrapers for different metrics
      cpu:
        metrics:
          system.cpu.time: # Total CPU seconds broken down by different states
            enabled: true
          system.cpu.utilization: # Percentage of CPU time broken down by different states.
            enabled: true
  # HostMetrics: Disk
  hostmetrics/disk:
    collection_interval: 60s
    # root_path: /
    scrapers:
      disk:
        # <include|exclude>:
        #   devices: [ <device name>, ... ]
        #   match_type: <strict|regexp>
        metrics:
          system.disk.io: # Disk bytes transferred.
            enabled: true
          system.disk.io_time: # Time disk spent activated. 
            enabled: true
          system.disk.merged: # The number of disk reads/writes merged into single physical disk access operations.
            enabled: true
          system.disk.operation_time: # Time spent in disk operations.
            enabled: true
          system.disk.operations: # Disk operations count.
            enabled: true
          system.disk.pending_operations: # The queue size of pending I/O operations.
            enabled: true
          system.disk.weighted_io_time: # Time disk spent activated multiplied by the queue length.
            enabled: true
  # HostMetrics: Load
  hostmetrics/load:
    collection_interval: 60s
    # root_path: /
    scrapers:
      load:
        cpu_average: false # specifies whether to divide the average load by the reported number of logical CPUs (default: false).
        metrics:
          system.cpu.load_average.1m: # Average CPU Load over 1 minute.
            enabled: true
          system.cpu.load_average.5m: # Average CPU Load 
            enabled: true
          system.cpu.load_average.15m: # Average CPU Load 
            enabled: true
  # HostMetrics: Filesystem
  hostmetrics/filesystem:
    collection_interval: 60s
    # root_path: /
    scrapers:
      filesystem:
        metrics:
          system.filesystem.inodes.usage: # Filesystem inodes used
            enabled: true
          system.filesystem.usage: # Filesystem bytes used
            enabled: true
          system.filesystem.utilization: # Fraction of filesystem bytes used
            enabled: true
  # HostMetrics: Network
  hostmetrics/network:
    collection_interval: 60s
    # root_path: /
    scrapers:
      network:
        # <include|exclude>:
          # interfaces: [ <interface name>, ... ]
          # match_type: <strict|regexp>
        metrics:
          system.network.connections: # The number of connections.
            enabled: true
          system.network.dropped: # The number of packets dropped.
            enabled: true
          system.network.errors: # The number of errors encountered
            enabled: true
          system.network.io: # The number of bytes transmitted and received
            enabled: true
          system.network.packets: # The number of packets transferred
            enabled: true
          system.network.conntrack.count: # The count of entries in conntrack table
            enabled: true
          system.network.conntrack.max: # The limit for entries in the conntrack table
            enabled: true
  otlp:
    protocols:
      http:
        endpoint:
        cors:
          allowed_origins:
            - "*"
            # Origins can have wildcards with *, use * by itself to match any origin.
  filelog:
    include: [ rolling.log ]
    start_at: beginning
    operators:
      - type: json_parser
        timestamp:
          parse_from: attributes.time
          layout: '%Y-%m-%d %H:%M:%S'
  # Filelog: /var/log/syslog
  filelog/syslog:
    include: [ /var/log/mecha-agent.log ]
    attributes:
      - stream_name: log_stream
# Processors
processors:
  memory_limiter:
    check_interval: 5s
    limit_mib: 64
    spike_limit_mib: 32
  batch:
# Exporters
exporters:
  otlp:
    endpoint: 0.0.0.0:3001
    compression: none
    retry_on_failure:
      enabled: false
    tls:
      insecure: true
    headers:
      user: "User"
  # Logging: Prints Otelcol logs to console
  logging:
    verbosity: detailed # can be detailed|normal|basic
# Service
service:
  pipelines:
    logs:
      receivers: [filelog/syslog]
      processors: [memory_limiter]
      exporters: [otlp]
    metrics:
      receivers: [hostmetrics/memory, hostmetrics/cpu, hostmetrics/disk, hostmetrics/load, hostmetrics/filesystem, hostmetrics/network]
      processors: [memory_limiter]
      exporters: [otlp]  
  extensions: []
